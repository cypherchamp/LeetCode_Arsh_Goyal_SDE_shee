class Solution {
public:
    bool f(vector<vector<char>>&b,string &word,int idx,int i,int j,vector<vector<bool>>&hash){

        int row=b.size(); int col=b[0].size();
        
        if(idx==word.size()){
            return true;
        }
        
        if((i>=row || j>=col) || (i<0 || j<0)){
            return false;
        }
        if(hash[i][j]){
            return false;
        }
        if(b[i][j]!=word[idx]){
            return false;
        }
        hash[i][j]=true;
        
        bool up=f(b,word,idx+1,i-1,j,hash);
        bool down=f(b,word,idx+1,i+1,j,hash);
        bool left=f(b,word,idx+1,i,j-1,hash);
        bool right=f(b,word,idx+1,i,j+1,hash);

        hash[i][j]=false;
      return (up || down) || (left || right);
    }
    bool exist(vector<vector<char>>& board, string word) {
        
       bool ans=false;
        // int idx=0;
        int row=board.size();
        int col=board[0].size();

                vector<vector<bool>>hash(row,vector<bool>(col,0));

        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                
              ans=f(board,word,0,i,j,hash);
                if(ans){
                    return true;
                }
                }
                
            }
                return false;

        }
    
};