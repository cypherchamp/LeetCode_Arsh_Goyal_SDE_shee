/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode *reverseList(ListNode *head){
        if(head==NULL || head->next==NULL)return head;
        ListNode *newHead=reverseList(head->next);
        ListNode *Next=head->next;
        Next->next=head;
        head->next=NULL;
        return newHead;
    }
    
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)return true;
        
        ListNode *temp=head;
        ListNode *slow=head;
        ListNode *fast=head;
        
        while(fast->next!=NULL and fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        slow->next=reverseList(slow->next);
       slow=slow->next;
        
        while(slow!=NULL){
        
            if(temp->val!=slow->val){
                return false;
            }
            temp=temp->next;
            slow=slow->next;
        }
        return true;
    }
};