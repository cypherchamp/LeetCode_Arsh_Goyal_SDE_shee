/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode *merger(ListNode *l1,ListNode *l2){
        
        ListNode *newList=new ListNode(0);
        ListNode *curr=newList;
        // ListNode *st=l2;
        while(l1!=NULL and l2!=NULL){
            if(l1->val>l2->val){
                curr->next=l2;
                curr=curr->next;
            l2=l2->next;
            }
            else{
                 curr->next=l1;
                curr=curr->next;
            l1=l1->next;
            }   
        }
        while(l1!=NULL){
            curr->next=l1;
            curr=curr->next;
            l1=l1->next;
        }
        while(l2!=NULL){
            curr->next=l2;
            curr=curr->next;
            l2=l2->next;
        }
        
        return newList->next;
    }
    
    ListNode* sortList(ListNode* head) {
        
        if(head==NULL || head->next==NULL)return head;
        
    ListNode *slow=head;
    ListNode *fast=head;
    ListNode *temp=NULL;
        while(fast!=NULL and fast->next!=NULL){
          temp=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        
        temp->next=NULL;
        ListNode *L=sortList(head);
        ListNode *R=sortList(slow);
        return merger(L,R);
    }
};